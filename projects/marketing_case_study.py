# -*- coding: utf-8 -*-
"""Marketing Case Study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XBgKNbHGkkE1QSA3RnLnJ45Ai-U0zhO1

**DATA DESCRIPTION**

**In this case study you have been hired as a consultant in a bank in New York city. The bank has extensive data of customres for past 6 months. The marketing team wants to launch a targeted ad marketing campaign to divide the customers into atleast 3 distinctive groups.**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.preprocessing import StandardScaler, normalize
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

from tensorflow.keras.layers import Input, Add, Dense, Activation
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.initializers import glorot_uniform
from keras.optimizers import SGD

creditcard_df= pd.read_csv('Marketing_data.csv')

creditcard_df.head()

creditcard_df.info()

creditcard_df.describe()

"""Balance Frequency is close to 1 so customers are regularly updating their balance."""

creditcard_df[creditcard_df['ONEOFF_PURCHASES'] == 40761.250000]

"""Customer ID C10574

1) The customer has a balance of 11547$.

2) He/She has a purchase of 49039$.

3) He/She has a high OneOff and installment purchase frequency but a low cash advance frequency.
"""

creditcard_df['CASH_ADVANCE'].max()

creditcard_df[creditcard_df['CASH_ADVANCE'] == 47137.211760000006 ]

"""Customer ID C12226

1) The Customer bank's balance is 10905$.

2) He/She has purchases of 432$.

3) He/She has a very high cash advance frequency and low OneOff purchase frequency.
"""

creditcard_df.isnull().sum()

creditcard_df.loc[(creditcard_df['MINIMUM_PAYMENTS'].isnull() == True), 'MINIMUM_PAYMENTS'] = creditcard_df['MINIMUM_PAYMENTS'].mean()

creditcard_df.isnull().sum()

creditcard_df.loc[(creditcard_df['CREDIT_LIMIT'].isnull() == True), 'CREDIT_LIMIT'] = creditcard_df['CREDIT_LIMIT'].mean()

creditcard_df.isnull().sum()

creditcard_df.duplicated().sum()

creditcard_df.drop('CUST_ID', axis= 1, inplace= True)

plt.figure(figsize= (10, 50))
for i in range(len(creditcard_df.columns)):
  plt.subplot(17, 1, i+1)
  sns.distplot(creditcard_df[creditcard_df.columns[i]], kde_kws= {'color': 'b', 'lw': 3, 'label': 'kde'}, 
               hist_kws= {'color': 'green'})
  plt.tight_layout()

plt.figure(figsize= (20, 20))
correlations= creditcard_df.corr()
sns.heatmap(correlations, annot= True)

"""There is a very strong correlation between:

1) Purchases and Oneoff Purchases.

2) Purchases Installment frequency and Purchases frequency.

3) Cash Advance Transaction and Cash Advance frequency.
"""

scaler= StandardScaler()
creditcard_df_scaled= scaler.fit_transform(creditcard_df)
creditcard_df_scaled

scores_1= []
range_values= range(1, 20)

for i in range_values:
  kmeans= KMeans(n_clusters= i)
  kmeans.fit(creditcard_df_scaled)
  scores_1.append(kmeans.inertia_)

plt.plot(scores_1, 'bx-')
plt.title('Choosing K value')
plt.xlabel('No of clusters')
plt.ylabel('WCSS')

"""The optimal no of clusters can be taken as 8."""

kmeans= KMeans(8)
kmeans.fit(creditcard_df_scaled)
labels= kmeans.labels_
labels

kmeans.cluster_centers_.shape

cluster_centers= pd.DataFrame(data= kmeans.cluster_centers_, columns= creditcard_df.columns)
cluster_centers

cluster_centers= scaler.inverse_transform(cluster_centers)
cluster_centers= pd.DataFrame(data= cluster_centers, columns= creditcard_df.columns )
cluster_centers

labels.max()

labels.min()

y_kmeans= kmeans.fit_predict(creditcard_df_scaled)
y_kmeans

creditcard_df_cluster= pd.concat([creditcard_df, pd.DataFrame({'cluster': labels})], axis= 1)
creditcard_df_cluster

for i in creditcard_df.columns:
  plt.figure(figsize= (35, 5))
  for j in range(8):
    plt.subplot(1, 8, j+1)
    clusters= creditcard_df_cluster[creditcard_df_cluster['cluster'] == j]
    clusters[i].hist(bins= 20)
    plt.title("{}  \n_cluster{}".format(i,j))

pca= PCA(n_components= 2)
creditcard_df_pca= pca.fit_transform(creditcard_df_scaled)
creditcard_df_pca

pca_df= pd.DataFrame(creditcard_df_pca, columns= ['pca1', 'pca2'])
pca_df

pca_df= pd.concat([pca_df, pd.DataFrame({'cluster': labels})], axis= 1)
pca_df.head()

plt.figure(figsize= (10,10))
sns.scatterplot(x= 'pca1', y= 'pca2', hue= 'cluster', data= pca_df, palette= ['green', 'pink', 'yellow', 'black', 'brown', 'red', 'gray', 'orange'])

input_df= Input(shape= (17,))
x= Dense(7, activation= 'relu')(input_df)
x= Dense(500, activation= 'relu', kernel_initializer= 'glorot_uniform')(x)
x= Dense(500, activation= 'relu', kernel_initializer= 'glorot_uniform')(x)
x= Dense(2000, activation= 'relu', kernel_initializer= 'glorot_uniform')(x)

encoded= Dense(10, activation='relu', kernel_initializer= 'glorot_uniform')(x)

x= Dense(2000, activation= 'relu', kernel_initializer= 'glorot_uniform')(encoded)
x= Dense(500, activation= 'relu', kernel_initializer= 'glorot_uniform')(x)

decoded= Dense(17, activation= 'relu', kernel_initializer= 'glorot_uniform')(x)

autoencoder= Model(input_df, decoded)

encoder= Model(input_df, encoded)

autoencoder.compile(optimizer= 'adam', loss= 'mean_squared_error')

autoencoder.fit(creditcard_df_scaled, creditcard_df_scaled, batch_size= 128, epochs= 25, verbose= 1)

autoencoder.summary()

pred= encoder.predict(creditcard_df_scaled)
pred

pred.shape

scores_2= []

for i in range(1, 20):
  kmeans= KMeans(n_clusters= i)
  kmeans.fit(pred)
  scores_2.append(kmeans.inertia_)

plt.plot(scores_2, 'bx-')
plt.title('Optimal no of K')
plt.xlabel('No of clusters')
plt.ylabel('WCSS')

plt.plot(scores_1, 'bx-', color= 'r')
plt.plot(scores_2, 'bx-', color= 'g')

kmeans= KMeans(4)
kmeans.fit(pred)
labels= kmeans.labels_

creditcard_df_cluster= pd.concat([creditcard_df, pd.DataFrame({'clusters': labels})], axis= 1)
creditcard_df_cluster.head()

pca= PCA(n_components= 2)
princ_components= pca.fit_transform(pred)
pca_df= pd.DataFrame(princ_components, columns= {'pca_1', 'pca_2'})
pca_df.head()

pca_df= pd.concat([pca_df, pd.DataFrame({'clusters': labels})], axis= 1)
pca_df.head()

plt.figure(figsize= (10, 10))
sns.scatterplot(x= 'pca_1', y= 'pca_2', hue= 'clusters', data= pca_df, palette= ['green', 'red', 'orange', 'yellow'])

