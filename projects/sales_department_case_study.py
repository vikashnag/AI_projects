# -*- coding: utf-8 -*-
"""Sales Department Case Study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d5Zhdl70MyOZCVF9U-vJpy6o_QBNnr8C
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

import datetime
from fbprophet import Prophet

sales_train_df= pd.read_csv('train.csv', engine='python')

sales_train_df.head()

sales_train_df.tail(10)

sales_train_df.info()

sales_train_df.describe()

"""1) There is an average of 6000 euros of sales of all the stores 2017-05-17 to 2017-07-31.

2) There is an average vsit of 636 customers during this period.
"""

store_info_df= pd.read_csv('store.csv')

store_info_df.head()

store_info_df.info()

store_info_df.describe()

"""The average distance between competition is around 5.4 km."""

sns.heatmap(sales_train_df.isnull(), yticklabels= False, cbar= False, cmap= 'Blues')

"""No missing values in the data."""

sales_train_df.hist(bins= 30, figsize= (20, 20), color= 'r')

"""1) An average of about 600 customers visit the stores in a particular day.

2) Day of the week column is equally distributed which means each day has represented equal number of data.

3) Almost 80% of the time, stores are open.

4) Not many promos are running during the time.

5) School holidays do affect sales heavily.
"""

sales_train_df['Customers'].max()

open= len(sales_train_df[sales_train_df['Open'] == 1])
open

closed= len(sales_train_df[sales_train_df['Open'] == 0])
closed

# Dropping the data containing closed shops as it contains no meaning.

sales_train_df= sales_train_df[sales_train_df['Open'] == 1]
sales_train_df

# Since we have data about the open stores we can drop the 'Open' column.

sales_train_df.drop('Open', axis= 1, inplace= True)

sales_train_df.describe()

"""The sales and the customers have increased since we have dropped some data."""

sns.heatmap(store_info_df.isnull(), yticklabels= False, cbar= False, cmap= 'Blues')

store_info_df[store_info_df['CompetitionDistance'].isnull()]

store_info_df[store_info_df['Promo2'] == 0]

"""Since 'Promo2' is 0 which means no additional promos were given and therefore the corresponding columns like 'Promo2SinceWeek', 'Promo2SinceYear' holds no values."""

str_col= ['CompetitionOpenSinceYear', 'CompetitionOpenSinceMonth', 'Promo2SinceWeek', 'Promo2SinceYear', 'PromoInterval']

for str in str_col:
  store_info_df[str].fillna(0, inplace= True)

sns.heatmap(store_info_df.isnull(), yticklabels= False, cbar= False, cmap= 'Blues')

store_info_df['CompetitionDistance'].fillna(store_info_df['CompetitionDistance'].mean(), inplace= True)

sns.heatmap(store_info_df.isnull(), yticklabels= False, cbar= False, cmap= 'Blues')

store_info_df.hist(bins= 30, figsize= (20, 20), color= 'r')

"""1) Competition Distance is around 3000m or 3 km.

2) More than half of the time Promo2 is running.
"""

stores_all_df= pd.merge( sales_train_df, store_info_df, how= 'inner', on= 'Store')

stores_all_df

correlations= stores_all_df.corr()['Sales'].sort_values()
correlations

plt.figure(figsize= (20, 20))
correlations= stores_all_df.corr()

sns.heatmap(correlations, annot= True)

"""There is a high correlation between Customers and Promo with sales."""

stores_all_df['Year']= pd.DatetimeIndex(stores_all_df['Date']).year
stores_all_df

stores_all_df['Month']= pd.DatetimeIndex(stores_all_df['Date']).month
stores_all_df['Day']= pd.DatetimeIndex(stores_all_df['Date']).day
stores_all_df

axis= stores_all_df.groupby('Month')['Sales'].mean().plot(marker= 'o', figsize= (10,5), color= 'r')
axis.set_title('Average Sales per Month')

plt.figure()

axis= stores_all_df.groupby('Month')['Customers'].mean().plot(marker= 'o', figsize= (10,5), color= 'b')
axis.set_title('Average Customers per Month')

"""Most of the sales and customers visits happen on December."""

axis2= stores_all_df.groupby('Day')['Sales'].mean().plot(figsize= (10,5), marker= 'o', color= 'r')
axis2.set_title('Average Sales per day')

plt.figure()

axis2= stores_all_df.groupby('Day')['Customers'].mean().plot(marker= 'o', figsize= (10,5), color= 'b')
axis2.set_title('Average Customers per day')

"""Most of the sales and customer visits happen between 15th and 20th of a month and during the last of the month."""

axis3= stores_all_df.groupby('DayOfWeek')['Sales'].mean().plot(figsize= (10,5), marker= 'o', color= 'r')
axis3.set_title('Average Sales per day of week')

plt.figure()

axis3= stores_all_df.groupby('DayOfWeek')['Customers'].mean().plot(marker= 'o', figsize= (10,5), color= 'b')
axis3.set_title('Average Customers per day of week')

"""Most of the sales and customer visits happen during Sunday of any week.(7 = Sunday)"""

f, ax= plt.subplots(figsize= (20,10))
stores_all_df.groupby(['Date', 'StoreType']).mean()['Sales'].unstack().plot(ax= ax)

"""Store b has highest number of average sales."""

plt.figure(figsize= (15, 10))

plt.subplot(211)
sns.barplot(x= 'Promo', y= 'Sales', data= stores_all_df)
plt.subplot(212)
sns.barplot(x= 'Promo', y= 'Customers', data= stores_all_df)

"""Promo has a very high correlation with Sales and Customers."""

plt.figure(figsize= (15, 10))

plt.subplot(211)
sns.violinplot(x= 'Promo', y= 'Sales', data= stores_all_df)

plt.subplot(212)
sns.violinplot(x= 'Promo', y= 'Customers', data= stores_all_df)

"""The average Sales and no of customers is comparatively high when there was a promo running on."""

def sales_predictions(storeid, sales, holidays, periods):
  sales= sales[sales['Store'] == storeid]
  sales= sales[['Date', 'Sales']].rename(columns= {'Date': 'ds', 'Sales': 'y'})
  sales.sort_values('ds')
  model= Prophet(holidays= holidays)
  model.fit(sales)
  future= model.make_future_dataframe(periods = periods)
  forecast= model.predict(future)
  figure= model.plot(forecast, xlabel= 'Dates', ylabel= 'Sales')
  figure2= model.plot_components(forecast)

sales_predictions(10, stores_all_df, 7)

"""1) The model predicts that the sales will be high on Sunday and also on December."""

school_holidays= stores_all_df[stores_all_df['SchoolHoliday'] ==1].loc[:, 'Date'].values
school_holidays

state_holidays= stores_all_df[(stores_all_df['StateHoliday'] == 'a') | (stores_all_df['StateHoliday'] == 'b') | (stores_all_df['StateHoliday'] == 'c') ].loc[:, 'Date'].values
state_holidays

school_holidays_df= pd.DataFrame({'ds': pd.to_datetime(school_holidays),
                              'holiday': 'school_holiday'})
school_holidays_df

state_holidays_df= pd.DataFrame({'ds': pd.to_datetime(state_holidays),
                                'holiday': 'state_holiday'})
state_holidays_df

all_holidays= pd.concat([school_holidays_df, state_holidays_df ])
all_holidays

sales_predictions(20, stores_all_df, all_holidays, 14)

