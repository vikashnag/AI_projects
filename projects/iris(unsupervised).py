# -*- coding: utf-8 -*-
"""Iris(Unsupervised).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QFvFlSk9yy8bdmt6V8fisqnIX4tuduvP

# **VIKASH NAG**

Prediction using Unsupervised ML 

● From the given ‘Iris’ dataset, predict the optimum number of  clusters and represent it visually. 

● Use R or Python or perform this task

● Dataset : https://bit.ly/3kXTdox

● Task submission: 1. Host the code on GitHub Repository (public). Record the code and output in a video. Post the video on YouTube 2. Share links of code (GitHub) and video (YouTube) as a post on YOUR LinkedIn profile 3. Submit the LinkedIn link in Task Submission Form when shared.

IMPORTING NECESSARY LIBRARIES
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

"""LOADING THE DATA"""

iris= pd.read_csv('/content/drive/MyDrive/Datasets/Iris.csv')

iris.head()

iris.info()

"""SEPARATING THE FEATURES FROM THE DATASET"""

features= iris.iloc[:,[1,2,3,4]]

"""VISUALIZING THE FEATURES"""

plt.figure(figsize= (12, 10))

for i in range(len(features.columns)):
  plt.subplot(4, 1, i+1)
  sns.distplot(features[features.columns[i]], hist_kws= {'color' : 'g'}, kde_kws= {'color' : 'b', 'lw': 3})
  plt.tight_layout()

"""SCALING THE FEATURES"""

scaler= StandardScaler()
iris_scaled= scaler.fit_transform(features)
iris_scaled

"""VISUALIZING THE LABELS"""

plt.figure(figsize= (12, 10))
sns.scatterplot(x= 'SepalLengthCm', y= 'SepalWidthCm', data= iris, hue= 'Species')

"""Here we can see that there might be 3 labels.

CALLING THE K-MEANS MODEL
"""

scores_1= []
range_values= range(1, 10)

for i in range_values:
  km= KMeans(n_clusters= i)
  km.fit(iris_scaled)
  scores_1.append(km.inertia_)

"""VISUALIZING THE NUMBER OF LABELS USING ELBOW METHOD"""

plt.plot(scores_1, 'bx-')
plt.title('Choosing k value')
plt.xlabel('No of clusters')
plt.ylabel('WCSS')

"""Optimal number of clusters is 3.

FITTING THE DATA TO THE MODEL
"""

km= KMeans(3)
km.fit(features)
labels= km.labels_

labels

"""FINDING THE CLUSTER CENTERS OF THE CLUSTERS"""

km.cluster_centers_

"""These are the co-ordinates of the cluster centres."""

km.cluster_centers_.shape

"""PREDICTING ON THE TEST DATA"""

y_kmeans= km.fit_predict(features)
y_kmeans

