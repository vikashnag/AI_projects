# -*- coding: utf-8 -*-
"""Decision Trees.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W9A810MZIl64C2S1ntWnrEp5oiWYNiRi

# **VIKASH NAG**

# Prediction using Decision Tree Algorithm (Level - Intermediate)

● Create the Decision Tree classifier and visualize it graphically. 

● The purpose is if we feed any new data to this  classifier, it would be able to predict the right class accordingly. 

● Dataset : https://bit.ly/3kXTdox

● Sample Solution : https://bit.ly/2G6sYx9

● Task submission: 1. Host the code on GitHub Repository (public). Record the code and output in a video. Post the video on YouTube 2. Share links of code (GitHub) and video (YouTube) as a post on YOUR LinkedIn profile 3. Submit the LinkedIn link in Task Submission Form when shared.

IMPORTING LIBRARIES
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from sklearn.model_selection import train_test_split

from sklearn import tree
from sklearn.tree import DecisionTreeClassifier

"""IMPORTING DATASET"""

iris= pd.read_csv('/content/drive/My Drive/Datasets/Iris.csv')

iris.head()

iris.info()

"""STATISTICAL ANALYSIS"""

iris.describe()

"""DROPPING THE 'ID' COLUMN"""

iris.drop('Id', axis= 1, inplace= True)

"""SEPARATING FEATURES AND LABELS"""

features= iris.iloc[:,[0,1,2,3]]
label= iris.iloc[:,4]

features

label

"""VISUALIZING FEATURES"""

plt.figure(figsize= (12, 10))

for i in range(len(features.columns)):
  plt.subplot(4, 1, i+1)
  sns.distplot(features[features.columns[i]], kde_kws= {'color': 'b', 'lw': 3, 'label' : 'kde'}, hist_kws= {'color': 'g', 'label' : 'hist'})
  plt.tight_layout()

"""VISUALIZING LABELS"""

sns.countplot(iris['Species'])

"""CONVERTING FEATURES AND LABELS TO ARRAY"""

features= features.values
label= label.values

"""DEFINING THE DECISION TREE MODEL"""

dt= DecisionTreeClassifier()
dt.fit(features, label)

"""VISUALIZING THE DECISION TREE"""

plt.figure(figsize= (15, 15))
tree.plot_tree(dt, filled= True)

"""VISUALIZING THE DECISION TREE IN FORM OF TEXT"""

print(tree.export_text(dt))

